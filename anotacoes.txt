Projeto de agendamento de pet shop/clínica veterinária com Docker e Laravel

Passos:

1 - Criar o projeto laravel:
	composer create-project --prefer-dist laravel/laravel petFriend-laravel

2 - Criar o Dockerfile na pasta raiz

3 - Inserir no Dockerfile: FROM wyveo/nginx-php-fpm:latest
	Neste comando o nginx manterá o document root na pasta /usr/share/nginx/html

4 - Criar o docker-compose.yaml

5 - Dar o comando 'docker-compose up -d' na raíz do projeto

6 - Testar o container do nginx no navegador com 'localhost:8080' conforme especificado no .yaml

7 - Se quiser entrar no container: docker exec -it <nome-container> bash

8 - Pra manter as alterações depois de derrubar o container é preciso configurar o volume entre a máquina e o container. Pra isso foi criado o item 'volumes' no .yaml

9 - Agora no navegador dá not found por causa da mudança de configuração das pastas na hora da criação do volume. É necessário criar um link simbólico 'ln -s public html'. Então quando o usuário entrar, o sistema entende que ao invés de procurar a pasta 'html' de antes, vai na 'public' do laravel

########## Parou no min 40 do tutorial https://www.youtube.com/watch?v=YsA1zmSB-G8


Dando erro de consulta de agendamentos quando o cliente tem mais de 1 email. Query:
select SH.dateTime, C.client_name, E.email, P.phone, PE.pet_name, S.street from clients C inner join emails E on C.id = E.client_id inner join phones P on C.id = P.client_id inner join pets PE on C.id = PE.client_id inner join streets S on S.id = C.street_id inner join schedules SH on SH.client_id = C.id where PE.pet_name = 'flip';

Pra não dar problema de tamanho em bytes na migrate do jetstream/autenticação:

	Edite o arquivo app\Providers\AppServiceProvider.php
	Adicione o namespace use Illuminate\Support\Facades\Schema;
	Dentro do método boot adicione Schema::defaultStringLength(191);

Validação de formulários com form request:
	php artisan make:request ClientRequest

	o arquivo fica em app/Http/Requests
	é bom mudar o 'false' pra 'true' na função 'authorize()' pra q se na hora de um cadastro de email por exemplo, o usuario colocar 'lkhfhjdfskg', não mostrar o erro 403 na tela

	importar o request no controller
	Mudar o "Request" das funções store, update, etc pra o nome do Request criado, no caso "ClientRequest"
	As regras serão implantadas na função 'rules()'

	Pra testar tirei o 'required' do html do 'client_name' e fiz na rule

	Até o momento se rodar com algum campo errado, só atualiza a página e nao mostra nada
	Pra aparecerem os erros, entre no arquivo do formulário e faça:
		@if($errors->any())
			<ul>
				@foreach($errors->all() as $error)
					<li>{{ $error }}</li>
				@endforeach
			</ul>
		@endif

	MUDEI DE IDEIA. O jeito acima apresenta os erros numa div. Segui o exemplo do video https://www.youtube.com/watch?v=eNlxTBNrmME que mostra cada erro embaixo do seu respectivo campo vazio